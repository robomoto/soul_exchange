<% include ./partials/header %>

<h3>Below is a list of the project requirements and where they can be found within the project</h3>

<li><strong>Requirement: </strong>Your database should be pre-populated with sample data. At least three rows per table is expected. The sample data should illustrate a table's functionality, e.g. if the table is part of a many-to-many relationship, the sample data should depict M:M.
<ul>
	<li>users Table: Pre-populated with 37 users</li>
	<li>souls Table: Pre-populted with 38 souls (this should actually match the number of users, but we didn't purge the database of test data during development, so it's off by one)</li>
	<li>listings Table: Pre-populationed with 30 listings for human souls</li>
	<li>listing_details Table: Prepopulated with 30 listing_details records for human souls</li>
</ul>
</li>
<li><strong>Requirement: </strong>Your database should have at least 4 entities and at least 4 relationships, one of which must be a many-to-many relationship.  The entities and relationships should implement the operational requirements of your project.
	<li>users: Many-to-Many relationship with souls<br />
		This table manages the users who login and interact with the website. <br>
		<strong>Links to actions:</strong> 
		<ul>
			<li><a href="/register">Create a User</a></li>
			<li><a href="/manage">Update a User</a></li>
		</ul>
	</li>
	<li>souls: has a Many-to-Many relationship with users <br>
		A soul is generated at the time a user is created and is the tradable commodity that The Soul Exchange(TM) brokers. <br>
		<li>Edit options for a soul are available from the <a href="/manage">manage</a> page.</li>
		<li>Set Soul Ranking options are available from the <a href="/manage">manage</a> page</li>
	</li>
	<li>listings: <br>
		A listing is a soul up for sale on The Soul Exchange(TM). <br>
		<strong>Links to actions: </strong> <br>
		In order to create a listing, the soul must first be <a href="/manage">ranked</a>, then you may list a soul.  Both actions can be found from the <a href="/manage">manage</a> page. <br>
		Once a soul is listed, it can be updated from the <a href="/manage">manage</a> page as well.
	</li>
	<li>listing_details: has a one-to-one relationship with listings <br>
		Splitting the listings entities into two sections allows us to work with smaller and simpler SQL tables and constructions which will allow The Soul Exchange(TM) to scale well with growth.
		<strong>Links to actions: </strong> 
		<ul>
			<li>In order to list a soul, the soul must first be <a href="/manage">ranked</a>, then you may list a soul.  Both actions can be found from the <a href="/manage">manage</a> page.</li>
			<li>Once a soul is listed, it can be updated from the <a href="/manage">manage</a> page as well.</li>
		</ul>
	</li>
</li>
<li><strong>Requirement: </strong>It should be possible to INSERT entries into every table individually.
	<ul>
		<li>A new user is inserted someone <a href="/register">registers</a> an account.</li>
		<li>A new soul is inserted someone <a href="/register">registers</a> an account.</li>
		<li>A new listing is inserted when someone creates a new listing from the <a href="/manage">manage</a> page.</li>
		<li>A new listing_details is inserted when someone creates a new listing from the <a href="/manage">manage</a> page.</li>
	</ul>
</li>
<li><strong>Requirement: </strong>Every table should be used in at least one SELECT query. For the SELECT queries, it is fine to just display the content of the tables, but your website needs to also have the ability to search using text or filter using a dynamically populated list of properties. This search/filter functionality should be present for at least one entity. It is generally not appropriate to have only a single query that joins all tables and displays them. <br>
	Pages that filter users: <br>
	<ul>
		<li>The Header of every page includes user information filtered to the current user.</li>
		<li>The <a href="/manage">manage</a> page connects to many features filtered to the current user.</li>
	</ul>
	Pages that filter souls:<br>
	<ul>
		<li>The <a href="/manage">manage</a> page filters content of the souls table in the "Collected Souls" section.</li>	
	</ul>
	Pages that filter listings:<br>
	<ul>
		<li>The <a href="/index">index</a> page of the site displays listings, listing_details, and souls data, filtered by the active dates and archived status in the listings table.</li>
		<li>The <a href="/manage">manage</a> page for a given user filters the listings table where the current user is the seller in the "Active Listings" section.</li>
		<li>The <a href="/manage">manage</a> page for a given user filters the listings table where the current user has won an auction but has not yet paid for the soul.</li>
	</ul>
	Pagest that filter listing_details:<br>
	<ul>
		<li>From the show route for a listing, a user may place a bid which allows the user to update a specific record in the listing_details table.</li>
	</ul>
</li>
<li><strong>Requirement: </strong>You need to include one DELETE and one UPDATE function in your website, for any one of the entities. In addition, it should be possible to add and remove things from at least one many-to-many relationship and it should be possible to add things to all relationships. This means you need INSERT functionality for all relationships as well as entities. And DELETE for at least one many-to-many relationship.
	<ul>
		<li>Users can be updated from the <a href="/manage">manage</a> page</li>
		<li>Souls can be updated from the <a href="/manage">manage</a> page</li>
		<li>Listings can be updated from the <a href="/manage">manage</a> page</li>
		<li>Listings can be deleted from the <a href="/manage">manage</a> page</li>
	</ul>
</li>
<li><strong>Requirement: </strong>In a one-to-many relationship (like bsg_people to bsg_planets), you should be able to set the foreign key value to NULL (such as on a person in bsg_people), that removes the relationship. In case none of the one-to-many relationships in your database has partial participation, you would need to change that to make sure they can have NULL values.
	<ul>
		<li>In the event that a listing goes unclaimed for three days after the end of an auction, the seller may REVOKE the soul. This removes the relationship between the listing and the current high bidder, setting both the high_bidder and curr_bid to NULL.</li>
	</ul>
</li>
<li>In a many-to-many relationship, to remove a relationship one would need to delete a row from a table. That would be the case with bsg_people and bsg_certifications. One should be able to add and remove certifications for a person without deleting either bsg_people rows or bsg_certification rows. If you implement DELETE functionality on at least (1) many-to-many relationship table, such that the rows in the relevant entity tables are not impacted, that is sufficient.
	<ul>
		<li>With our M-2-M relationship between users and listings, relationships are nullable within the listing_details page.</li>
	</ul>
</li> 
<% include ./partials/footer %>